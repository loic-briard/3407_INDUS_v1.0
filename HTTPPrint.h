/*********************************************************************
 * FileName: HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * Processor: PIC18,PIC24E, PIC24F, PIC24H, dsPIC30F, dsPIC33F, dsPIC33E,PIC32
 * Compiler:  Microchip C18, C30, C32
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 *
 * Software License Agreement
 *
 * Copyright (C) 2012 Microchip Technology Inc.  All rights
 * reserved.
 *
 * Microchip licenses to you the right to use, modify, copy, and 
  * distribute: 
 * (i)  the Software when embedded on a Microchip microcontroller or 
 *      digital signal controller product ("Device") which is 
 *      integrated into Licensee's product; or 
 * (ii) ONLY the Software driver source files ENC28J60.c, ENC28J60.h,
 *		ENCX24J600.c and ENCX24J600.h ported to a non-Microchip device
 *		used in conjunction with a Microchip ethernet controller for
 *		the sole purpose of interfacing with the ethernet controller.
 *
 * You should refer to the license agreement accompanying this 
 * Software for additional information regarding your rights and 
 * obligations.
 *
 * THE SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
 * BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE 
 * THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER 
 * SIMILAR COSTS, WHETHER ASSERTED ON THE BASIS OF CONTRACT, TORT
 * (INCLUDING NEGLIGENCE), BREACH OF WARRANTY, OR OTHERWISE.
 *
 *********************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_adresse_ip_auto(WORD);
void HTTPPrint_adresse_ip_value(void);
void HTTPPrint_ntp_server(void);
void HTTPPrint_decal_heure_service(WORD);
void HTTPPrint_ete_hiver_service(WORD);
void HTTPPrint_heure_date(void);
void HTTPPrint_server_list_ip_secondaires(void);
void HTTPPrint_adresse_ip_auto_secondaires(void);
void HTTPPrint_heure_vieillissement(WORD);
void HTTPPrint_lundi(void);
void HTTPPrint_mardi(void);
void HTTPPrint_mercredi(void);
void HTTPPrint_jeudi(void);
void HTTPPrint_vendredi(void);
void HTTPPrint_samedi(void);
void HTTPPrint_dimanche(void);
void HTTPPrint_marche(void);
void HTTPPrint_arret(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPPrint_adresse_ip_auto(1);
			break;
        case 0x00000001:
			HTTPPrint_adresse_ip_auto(0);
			break;
        case 0x00000002:
			HTTPPrint_adresse_ip_value();
			break;
        case 0x00000003:
			HTTPPrint_ntp_server();
			break;
        case 0x00000004:
			HTTPPrint_decal_heure_service(0);
			break;
        case 0x00000005:
			HTTPPrint_decal_heure_service(1);
			break;
        case 0x00000006:
			HTTPPrint_decal_heure_service(2);
			break;
        case 0x00000007:
			HTTPPrint_decal_heure_service(3);
			break;
        case 0x00000008:
			HTTPPrint_decal_heure_service(4);
			break;
        case 0x00000009:
			HTTPPrint_decal_heure_service(5);
			break;
        case 0x0000000a:
			HTTPPrint_decal_heure_service(6);
			break;
        case 0x0000000b:
			HTTPPrint_decal_heure_service(7);
			break;
        case 0x0000000c:
			HTTPPrint_decal_heure_service(8);
			break;
        case 0x0000000d:
			HTTPPrint_decal_heure_service(9);
			break;
        case 0x0000000e:
			HTTPPrint_decal_heure_service(10);
			break;
        case 0x0000000f:
			HTTPPrint_decal_heure_service(11);
			break;
        case 0x00000010:
			HTTPPrint_decal_heure_service(12);
			break;
        case 0x00000011:
			HTTPPrint_decal_heure_service(13);
			break;
        case 0x00000012:
			HTTPPrint_decal_heure_service(14);
			break;
        case 0x00000013:
			HTTPPrint_decal_heure_service(15);
			break;
        case 0x00000014:
			HTTPPrint_decal_heure_service(16);
			break;
        case 0x00000015:
			HTTPPrint_decal_heure_service(17);
			break;
        case 0x00000016:
			HTTPPrint_decal_heure_service(18);
			break;
        case 0x00000017:
			HTTPPrint_decal_heure_service(19);
			break;
        case 0x00000018:
			HTTPPrint_decal_heure_service(20);
			break;
        case 0x00000019:
			HTTPPrint_decal_heure_service(21);
			break;
        case 0x0000001a:
			HTTPPrint_decal_heure_service(22);
			break;
        case 0x0000001b:
			HTTPPrint_decal_heure_service(23);
			break;
        case 0x0000001c:
			HTTPPrint_decal_heure_service(24);
			break;
        case 0x0000001d:
			HTTPPrint_ete_hiver_service(0);
			break;
        case 0x0000001e:
			HTTPPrint_ete_hiver_service(1);
			break;
        case 0x0000001f:
			HTTPPrint_ete_hiver_service(2);
			break;
        case 0x00000020:
			HTTPPrint_ete_hiver_service(3);
			break;
        case 0x00000021:
			HTTPPrint_heure_date();
			break;
        case 0x00000037:
			HTTPPrint_server_list_ip_secondaires();
			break;
        case 0x00000038:
			HTTPPrint_adresse_ip_auto_secondaires();
			break;
        case 0x00000057:
			HTTPPrint_heure_vieillissement(0);
			break;
        case 0x00000058:
			HTTPPrint_heure_vieillissement(1);
			break;
        case 0x00000059:
			HTTPPrint_lundi();
			break;
        case 0x0000005a:
			HTTPPrint_mardi();
			break;
        case 0x0000005b:
			HTTPPrint_mercredi();
			break;
        case 0x0000005c:
			HTTPPrint_jeudi();
			break;
        case 0x0000005d:
			HTTPPrint_vendredi();
			break;
        case 0x0000005e:
			HTTPPrint_samedi();
			break;
        case 0x0000005f:
			HTTPPrint_dimanche();
			break;
        case 0x00000060:
			HTTPPrint_marche();
			break;
        case 0x00000061:
			HTTPPrint_arret();
			break;
        case 0x00000064:
			HTTPPrint_marche(0);
			break;
        case 0x00000065:
			HTTPPrint_arret(1);
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
